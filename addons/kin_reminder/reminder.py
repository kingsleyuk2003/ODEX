# -*- coding: utf-8 -*-
# Part of Odoo. See LICENSE file for full copyright and licensing details.
# Copyright Kinsolve Solutions
# Copyright Kingsley Okonkwo (kingsley@kinsolve.com, +2348030412562)
# License: see https://www.gnu.org/licenses/lgpl-3.0.en.html


from datetime import datetime, timedelta
from openerp import api, fields, models, _
from openerp.tools import DEFAULT_SERVER_DATETIME_FORMAT



class Reminder(models.Model):
    _name = 'kin.reminder'
    _description = "Reminder"
    _inherit = ['mail.thread']


    @api.model
    def run_reminder_expiry_date_check(self):
        is_send_email_expiry_notification  = self.env.user.company_id.is_send_email_expiry_notification
        if  is_send_email_expiry_notification :
            reminder_obj = self.env['kin.reminder']
            ctx = self.env.context.copy()
            the_date = datetime.today().strftime('%d-%m-%Y %H:%M:%S')
            msg = "<style> " \
                    "table, th, td {" \
                    "border: 1px solid black; " \
                    "border-collapse: collapse;" \
                    "}" \
                    "th, td {" \
                    "padding-left: 5px;"\
                    "}" \
                    "</style>"
            msg += "<p>Hello,</p>"
            msg += "<p>Please see the Expiry Record Notification as at %s</p><p></p>"  % (the_date)
            msg += "<table width='100%' >"
            msg += "<tr><td colspan='5' align='center' style='margin:35px' ><h3>List of Records Due</h3></td></tr>" \
                  "<tr align='left' ><th>S/N</th><th>Record Name</th><th>Reference No.</th><th>Expiry Date</th><th>Remaining Days to Expire</th></tr>"

            at_least_one = False
            reminders = reminder_obj.search([])
            count = 0

            for reminder in reminders :
                reminder._compute_remaining_days()
                if reminder.is_expiring_soon and reminder.state == 'activated' :
                    reminder_name = reminder.name
                    nafdac_reg_no = reminder.reference_no
                    expiry_date_format = datetime.strptime(reminder.expiry_date,'%Y-%m-%d').strftime('%d-%m-%Y')
                    remaining_days = reminder.days_remaining
                    count += 1
                    at_least_one = True
                    msg += "<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>" % (count,reminder_name,nafdac_reg_no,expiry_date_format,remaining_days)

            msg += "</table> <p></p><p>Just for your information, concerning reminders that are about to expire. Incase you want any of the items to be exempted from the next reminders list. Please log in and deactivate for the specific reminder</p>" \
				  "<p>Regards and Thanks</p>" \
				  "<p>This is an autogenerated message from %s ERP System</p>" % (self.env.user.company_id.name)


            #Send Email
            company_email = self.env.user.company_id.email.strip()
            if company_email and at_least_one :
                user_ids = []
                mail_obj = self.env['mail.mail']
                group_obj = self.env.ref('kin_reminder.group_receive_reminder_email_reminder')
                for user in group_obj.users:
                    #Send Email
                    mail_data = {
                            'model': 'kin.reminder',
                            'res_id': self.id,
                            'record_name': 'Expiry Alert Reminder Notification',
                            'email_from': company_email,
                            'reply_to': company_email,
                            'subject': "Expiry Alert Notification for the Date %s" % (the_date),
                            'body_html': '%s' % msg,
                            'auto_delete': True,
                            #'recipient_ids': [(4, id) for id in new_follower_ids]
                            'email_to': user.partner_id.email
                        }
                    mail_id = mail_obj.create(mail_data)
                    mail_obj.send([mail_id])

            return True

    @api.multi
    def btn_activate(self):
        self.state = 'activated'

    @api.multi
    def btn_deactivate(self):
        self.state = 'deactivated'

    @api.depends('expiry_date','expiry_day_interval')
    def _compute_remaining_days(self):
        for rec in self :
            if rec.expiry_date :
                exp_date = rec.expiry_date
                today = datetime.strptime(datetime.today().strftime('%Y-%m-%d %H:%M:%S'), DEFAULT_SERVER_DATETIME_FORMAT)
                expiry_date = datetime.strptime(exp_date,'%Y-%m-%d')
                date_diff = expiry_date - today
                remaining_days = date_diff.days
                rec.days_remaining = remaining_days
                expiry_day_interval = rec.expiry_day_interval
                if (remaining_days <= expiry_day_interval) and (remaining_days < 0):
                    rec.is_expired = True
                elif (remaining_days <= expiry_day_interval) and (remaining_days > 0):
                    rec.is_expired = False
                    rec.is_expiring_soon = True
                else :
                    rec.is_expired = False
                    rec.is_expiring_soon = False


    name = fields.Char('Name', required=True, translate=True, select=True,track_visibility = "onchange")
    reference_no = fields.Char('Reference No.')
    issue_date = fields.Date('Issued Date' ,track_visibility="onchange" )
    expiry_date = fields.Date('Expiry Date',track_visibility="onchange",required=True)
    expiry_day_interval = fields.Integer(string='Reminder Days Before Expiry', help="Reminder Days Intervals from the Expiry Date",required=True,default=lambda self: self.env.user.company_id.expiry_date_interval)
    days_remaining = fields.Integer(string='Remaining Days to Expire',compute='_compute_remaining_days',store=True)
    is_expired = fields.Boolean(string="Is Expired")
    is_expiring_soon = fields.Boolean(string="Is Expiring Soon")
    user_id = fields.Many2one('res.users',string='Responsible',default=lambda self: self.env.user.id, readonly=True)
    note = fields.Text(string='Note')
    state = fields.Selection([('activated', 'Reminder Activated'), ('deactivated', 'Reminder De-Activated')],default='activated', track_visibility='onchange')




class ResCompanyreminderRegulationExtend(models.Model):
    _inherit = "res.company"

    expiry_date_interval = fields.Integer(string='Reminder Days Before Expiry', default=30)
    is_send_email_expiry_notification = fields.Boolean(string='Send Email Expiry Notification',default=True)
